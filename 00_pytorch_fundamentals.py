# -*- coding: utf-8 -*-
"""00_pytorch_fundamentas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Y9ugCo_fds3fKConUCdPVtPCi5vhuuw

Pytorch Fundamentals
"""

import torch
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
print(torch.__version__)

"""##**Intro To Tensors**

###          Creating tensors

Pytorch tensors are created using "torch.tensor()"

Scalar
"""

# scalar
scalar = torch.tensor(7)
scalar

scalar.ndim

scalar.item()

"""Vector"""

vector = torch.tensor([7,7])
vector

scalar.ndim

vector.ndim

"""# Random Tensors

"""

random_tensor = torch.rand(3,6,5)
random_tensor, random_tensor.ndim

# Default datatype for tensors is float32
float_32_tensor = torch.tensor([3.0, 6.0, 9.0],
                               dtype=None, # defaults to None, which is torch.float32 or whatever datatype is passed
                               device=None, # defaults to None, which uses the default tensor type
                               requires_grad=False) # if True, operations performed on the tensor are recorded

float_32_tensor.shape, float_32_tensor.dtype, float_32_tensor.device

float_16_tensor = torch.tensor([3.0, 6.0, 9.0],
                               dtype=torch.float16) # torch.half would also work

float_16_tensor.dtype

"""```
# This is formatted as code
```

#Tensor Datatypes

**Note**: Tensor datatypes is one of the big 3 errors with pytorch & deep learning:
1. Tensors not right datatype
2. Tensors not right shape
3. Tensors not on right device
"""

float16_torch = torch.tensor([3.0, 6.0, 9.0],
                               dtype=torch.float16,
                               device=None,
                           requires_grad=False) # torch.half would also work

float16_torch.dtype

float32_torch = torch.tensor([3.0, 6.0, 9.0],
                               dtype=torch.float32,
                               device=None,
                           requires_grad=False) # torch.half would also work

float32_torch.dtype

float32_torch*float16_torch

"""# Gettig info from Tensors

1. Tensors not right datatype - to get a datatype from a tensor we can use 'tensor.dtype'
2. Tensors not right shape - to get the shape from tensor we can use 'tensor.shape'
3. Tensors not on right device - to get device from a tensor we can use 'tensor.device'
"""

